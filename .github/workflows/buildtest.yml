name: Action Build Process

on:
  push:
    branches: [ "17-refactor-integration-tests" ]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ "17-refactor-integration-tests" ]
    paths-ignore:
      - 'README.md'
 
permissions:
  contents: read

jobs:
  build-python:
    name: Build and Test Python code
    runs-on: ubuntu-latest
    steps:

    - name: Checkout sources
      uses: actions/checkout@v3

    - name: Setup build vars for project
      run: |
        for i in `cat conf/buildvars.properties` ; do echo "$i" >> $GITHUB_ENV ; done

    - name: Setup Python ${{ env.PYTHON_VERSION }} interpreter
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Ensure all sources in Unix format
      run: |
        sudo apt-get install -y dos2unix
        find . -type f -name "*.py" | xargs dos2unix

    - name: Setup Python dependency modules
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Ensure Python source code respects the coding standards
      run: |
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 . --count --extend-ignore=F811,E266,E203 --max-complexity=12 --statistics
      
    - name: Run Python unit tests
      run: |
        python -m nose2 -v -F -s ${{ env.UNIT_TEST_DIR }} -t .


  it-action-plaintext:
    needs: build-python
    env:
      version_build_tag: "RC"
      version_product_major: 1
      version_product_minor: 0

    name: Integration Test - Plain Text
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources for fixtures
        uses: actions/checkout@v3

      - name: When we require all vars from a set of files without override 
        uses: zlatko-ms/varfiletoenv@17-refactor-integration-tests
        with:
          override: false
          paths: |
            ./test/fixtures/integ/plain/plain1.properties
            ./test/fixtures/integ/plain/plain2.properties

      - name: Then all the vars from the fileset are injected
        run: | 
          # load assertion function
          source ./test/shell/assertvariable.sh

          # perform assertions
          assertDefinedAndEqualTo "version_build_major" "1"
          assertDefinedAndEqualTo "version_build_major" "2"
          assertDefinedAndEqualTo "version_build_patch" "42"

      - name: And no existing variable was overriden
        run: | 
          # load assertion function
          source ./test/shell/assertvariable.sh
  
          # perform assertions
          assertDefinedAndEqualTo "version_build_tag" "RC"

      - name: When we require all vars from a set of files with override
        uses: zlatko-ms/varfiletoenv@17-refactor-integration-tests
        with:
          override: true
          paths: |
            ./test/fixtures/integ/plain/override1.properties
            ./test/fixtures/integ/plain/override2.properties

      - name: Then the already exiting variables will be updated
        run: | 
          # load assertion function
          source ./test/shell/assertvariable.sh

          # perform assertions
          assertDefinedAndEqualTo "version_product_major" "2"
          assertDefinedAndEqualTo "version_product_minor" "1"

      - name: And non exiting variables will be injected
        run: | 
          # load assertion function
          source ./test/shell/assertvariable.sh

          # perform assertions
          assertDefinedAndEqualTo "version_product_label" "fresh"

      - name: When we require to inject variables from a file set that contains invalid files
        uses: zlatko-ms/varfiletoenv@17-refactor-integration-tests
        with:
          override: false
          paths: |
            ./test/fixtures/integ/plain/org.properties
            ./test/fixtures/integ/plain/missing1.properties
            ./test/fixtures/integ/plain/missing2.properties

      - name: Then the operation will not fail and only variables from valid files will be processed
        run: | 
          # load assertion function
          source ./test/shell/assertvariable.sh

          # perform assertions
          assertDefinedAndEqualTo "version_product_lead" "someone"
  
  # it-action-textfile-override:
  #   needs: build-python
  
  #   env:
  #     myVar1: Value1
  #     myVar2: Value2
  #     myVar3: Value3
        
  #   name: Integration Test - Override Variables
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v3
  
  #     - name: No override unless flag specified
  #       uses: zlatko-ms/varfiletoenv@17-refactor-integration-tests
  #       with:
  #         logs: true
  #         override: flase
  #         paths: ./test/fixtures/integ/override1.properties

  #     - name: Ensure variables are not overriden unless flag specified
  #       run: |
  #         # Source the assertion shell function
  #         source ./test/shell/assertvariable.sh
                
  #         # Test file injected variables
  #         assertDefinedAndEqualTo "myVar1" "Value1"

  #     - name: Override when flag specified or omitted
  #       uses: zlatko-ms/varfiletoenv@17-refactor-integration-tests
  #       with:
  #         logs: true
  #         paths: |
  #           ./test/fixtures/integ/override1.properties
  #           ./test/fixtures/integ/override2.properties
            
  #     - name: Ensure variables are overriden when flag specified or omitted
  #       run: |
  #         # Source the assertion shell function
  #         source ./test/shell/assertvariable.sh
                    
  #         # Test file injected variables
  #         assertDefinedAndEqualTo "myVar1" "UpdatedValue1"
  #         assertDefinedAndEqualTo "myVar2" "UpdatedValue2"
  #         assertDefinedAndEqualTo "myVar3" "Value3"
              
  # it-action-json:
  #   needs: build-python
  #   env:
  #     tags_docker_source : mybranch

  #   name: Integration Test - Handle JSON
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v3

  #     - name: Define variables from json files
  #       uses: zlatko-ms/varfiletoenv@17-refactor-integration-tests
  #       with:
  #         logs: true
  #         paths: |
  #           ./test/fixtures/integ/simple.json
  #           ./test/fixtures/integ/nested.json

  #     - name: Ensure variables are defined from json files
  #       run: |
  #         # Source the assertion shell function
  #         source ./test/shell/assertvariable.sh
                        
  #         # Test file injected variables
  #         assertDefinedAndEqualTo "major" "1"
  #         assertDefinedAndEqualTo "minor" "2"
  #         assertDefinedAndEqualTo "build_version_major" "1"
  #         assertDefinedAndEqualTo "build_version_minor" "2"       
          
  #     - name: Define variables from json and prevent overriding
  #       uses: zlatko-ms/varfiletoenv@17-refactor-integration-tests
  #       with:
  #         logs: true
  #         override: false
  #         paths: |
  #           ./test/fixtures/integ/override.json

  #     - name: Ensure variables are not overriden when flag is set to false
  #       run: |
  #         # Source the assertion shell function
  #         source ./test/shell/assertvariable.sh
                            
  #         # Test file injected variables
  #         assertDefinedAndEqualTo "tags_docker_source" "mybranch"

               
  # it-action-yaml:
  #   needs: build-python
  #   env:
  #     tags_docker_source : mybranch
        
  #   name: Integration Test - Handle YAML
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v3
        
  #     - name: Define variables from yaml files
  #       uses: zlatko-ms/varfiletoenv@17-refactor-integration-tests
  #       with:
  #         logs: true
  #         paths: |
  #           ./test/fixtures/integ/simple.yaml
  #           ./test/fixtures/integ/nested.yaml
        
  #     - name: Ensure variables are defined from yaml files
  #       run: |
  #         # Source the assertion shell function
  #         source ./test/shell/assertvariable.sh
                                
  #         # Test file injected variables
  #         assertDefinedAndEqualTo "major" "1"
  #         assertDefinedAndEqualTo "minor" "2"
  #         assertDefinedAndEqualTo "build_version_major" "1"
  #         assertDefinedAndEqualTo "build_version_minor" "2"       
                  
  #     - name: Define variables from yaml and prevent overriding
  #       uses: zlatko-ms/varfiletoenv@17-refactor-integration-tests
  #       with:
  #         logs: true
  #         override: false
  #         paths: |
  #           ./test/fixtures/integ/override.json
        
  #     - name: Ensure variables are not overriden when flag is set to false
  #       run: |
  #         # Source the assertion shell function
  #         source ./test/shell/assertvariable.sh
                                    
  #         # Test file injected variables
  #         assertDefinedAndEqualTo "tags_docker_source" "mybranch"
        
