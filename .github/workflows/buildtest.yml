name: Action Build Process

on:
  push:
    branches: [ "9-add-support-for-filter-on-variables" ]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ "9-add-support-for-filter-on-variables" ]
    paths-ignore:
      - 'README.md'
 
permissions:
  contents: read

jobs:
  build-python:
    name: Build and Test Python code
    runs-on: ubuntu-latest
    steps:

    - name: Checkout sources
      uses: actions/checkout@v3

    - name: Setup project build variables
      run: |
        for i in `cat conf/buildvars.properties` ; do echo "$i" >> $GITHUB_ENV ; done

    - name: Setup Python ${{ env.PYTHON_VERSION }} interpreter
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Ensure all sources in Unix format
      run: |
        sudo apt-get install -y dos2unix
        find . -type f -name "*.py" | xargs dos2unix

    - name: Setup Python dependency modules
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Enforce coding standards
      run: |
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 . --count --extend-ignore=F811,E266,E203 --max-complexity=12 --statistics
      
    - name: Run Unit Tests
      run: |
        python -m nose2 -v -F -s ${{ env.UNIT_TEST_DIR }} -t .


  it-action-plaintext:
    needs: build-python
    env:
      version_build_tag: "RC"
      version_product_major: 1
      version_product_minor: 0

    name: Integration Tests - Plain Text
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources for fixtures
        uses: actions/checkout@v3

      ## FEATURE : Importing without overrides 

      - name: When we require all vars from a set of files without override 
        uses: zlatko-ms/varfiletoenv@9-add-support-for-filter-on-variables
        with:
          paths: |
            ./test/fixtures/integ/plain/build1.properties
            ./test/fixtures/integ/plain/build2.properties

      - name: Then all the vars from the fileset are injected
        run: | 
          # load assertion function
          source ./test/shell/assertvariable.sh

          # perform assertions
          assertDefinedAndEqualTo "version_build_major" "1"
          assertDefinedAndEqualTo "version_build_minor" "2"
          assertDefinedAndEqualTo "version_build_patch" "42"

      - name: And no existing variable was overriden
        run: | 
          # load assertion function
          source ./test/shell/assertvariable.sh
  
          # perform assertions
          assertDefinedAndEqualTo "version_build_tag" "RC"

      ## FEATURE : Importing with overrides 

      - name: When we require all vars from a set of files with override
        uses: zlatko-ms/varfiletoenv@9-add-support-for-filter-on-variables
        with:
          override: true
          paths: |
            ./test/fixtures/integ/plain/product1.properties
            ./test/fixtures/integ/plain/product2.properties

      - name: Then the already exiting variables will be updated
        run: | 
          # load assertion function
          source ./test/shell/assertvariable.sh

          # perform assertions
          assertDefinedAndEqualTo "version_product_major" "2"
          assertDefinedAndEqualTo "version_product_minor" "1"

      - name: And non exiting variables will be injected
        run: | 
          # load assertion function
          source ./test/shell/assertvariable.sh

          # perform assertions
          assertDefinedAndEqualTo "version_product_label" "fresh"

      ## FEATURE : Only valid files are processed

      - name: When we require to inject variables from a file set that contains invalid files
        uses: zlatko-ms/varfiletoenv@9-add-support-for-filter-on-variables
        with:
          paths: |
            ./test/fixtures/integ/plain/org.properties
            ./test/fixtures/integ/plain/missing1.properties
            ./test/fixtures/integ/plain/missing2.properties

      - name: Then the operation will not fail and only variables from valid files will be processed
        run: | 
          # load assertion function
          source ./test/shell/assertvariable.sh

          # perform assertions
          assertDefinedAndEqualTo "version_product_lead" "someone"

      ## FEATURE : Only selected variables are processed

      - name: When we require to inject selected variables from a larger set
        uses: zlatko-ms/varfiletoenv@9-add-support-for-filter-on-variables
        with:
          select: |
            runtime_version_minor
            runtime_version_patch
          paths: |
            ./test/fixtures/integ/plain/somevars1.properties
            ./test/fixtures/integ/plain/somevars2.properties

      - name: Then the selected variables will be imported
        run: | 
          # load assertion function
          source ./test/shell/assertvariable.sh
  
          # perform assertions
          assertDefinedAndEqualTo "runtime_version_minor" "2"
          assertDefinedAndEqualTo "runtime_version_patch" "16"

      - name: And the variables not part of the selection will be ignored
        run: | 
          # load assertion function
          source ./test/shell/assertvariable.sh

          # perform assertions
          assertNotDefined "runtime_version_major"
        

  it-action-json:
    needs: build-python
    env:
      version_build_tag: "RC"
      version_product_major: 1
      version_product_minor: 0

    name: Integration Tests - JSON
    runs-on: ubuntu-latest
    steps:
        - name: Checkout sources for fixtures
          uses: actions/checkout@v3

        ## FEATURE : Importing without overrides 

        - name: When we require all vars from a set of files without override 
          uses: zlatko-ms/varfiletoenv@9-add-support-for-filter-on-variables
          with:
            paths: |
              ./test/fixtures/integ/json/build1.json
              ./test/fixtures/integ/json/build2.json

        - name: Then all the vars from the fileset are injected
          run: | 
            # load assertion function
            source ./test/shell/assertvariable.sh

            # perform assertions
            assertDefinedAndEqualTo "version_build_major" "1"
            assertDefinedAndEqualTo "version_build_minor" "2"
            assertDefinedAndEqualTo "version_build_patch" "42"

        - name: And no existing variable was overriden
          run: | 
            # load assertion function
            source ./test/shell/assertvariable.sh
    
            # perform assertions
            assertDefinedAndEqualTo "version_build_tag" "RC"

        ## FEATURE : Importing with overrides 

        - name: When we require all vars from a set of files with override
          uses: zlatko-ms/varfiletoenv@9-add-support-for-filter-on-variables
          with:
            override: true
            paths: |
              ./test/fixtures/integ/json/product1.json
              ./test/fixtures/integ/json/product2.json

        - name: Then the already exiting variables will be updated
          run: | 
            # load assertion function
            source ./test/shell/assertvariable.sh

            # perform assertions
            assertDefinedAndEqualTo "version_product_major" "2"
            assertDefinedAndEqualTo "version_product_minor" "1"

        - name: And non exiting variables will be injected
          run: | 
            # load assertion function
            source ./test/shell/assertvariable.sh

            # perform assertions
            assertDefinedAndEqualTo "version_product_label" "fresh"

        ## FEATURE : Only valid files are processed

        - name: When we require to inject variables from a file set that contains invalid files
          uses: zlatko-ms/varfiletoenv@9-add-support-for-filter-on-variables
          with:
            paths: |
              ./test/fixtures/integ/json/org.json
              ./test/fixtures/integ/json/missing1.json
              ./test/fixtures/integ/json/missing2.json
  
        - name: Then the operation will not fail and only variables from valid files will be processed
          run: | 
            # load assertion function
            source ./test/shell/assertvariable.sh
  
            # perform assertions
            assertDefinedAndEqualTo "version_product_lead" "someone" 


        ## FEATURE : Only selected variables are processed

        - name: When we require to inject selected variables from a larger set
          uses: zlatko-ms/varfiletoenv@9-add-support-for-filter-on-variables
          with:
            select: |
              runtime_version_minor
              runtime_version_patch
            paths: |
              ./test/fixtures/integ/json/somevars1.json
              ./test/fixtures/integ/json/somevars2.json

        - name: Then the selected variables will be imported
          run: | 
            # load assertion function
            source ./test/shell/assertvariable.sh
    
            # perform assertions
            assertDefinedAndEqualTo "runtime_version_minor" "2"
            assertDefinedAndEqualTo "runtime_version_patch" "16"

        - name: And the variables not part of the selection will be ignored
          run: | 
            # load assertion function
            source ./test/shell/assertvariable.sh

            # perform assertions
            assertNotDefined "runtime_version_major"
                
  
  # it-action-yaml:
  #   needs: build-python
  #   env:
  #     version_build_tag: "RC"
  #     version_product_major: 1
  #     version_product_minor: 0

  #   name: Integration Tests - YAML
  #   runs-on: ubuntu-latest
  #   steps:
  #       - name: Checkout sources for fixtures
  #         uses: actions/checkout@v3

  #       ## FEATURE : Importing without overrides 

  #       - name: When we require all vars from a set of files without override 
  #         uses: zlatko-ms/varfiletoenv@9-add-support-for-filter-on-variables
  #         with:
  #           paths: |
  #             ./test/fixtures/integ/yaml/build1.yaml
  #             ./test/fixtures/integ/yaml/build2.yaml

  #       - name: Then all the vars from the fileset are injected
  #         run: | 
  #           # load assertion function
  #           source ./test/shell/assertvariable.sh

  #           # perform assertions
  #           assertDefinedAndEqualTo "version_build_major" "1"
  #           assertDefinedAndEqualTo "version_build_minor" "2"
  #           assertDefinedAndEqualTo "version_build_patch" "42"

  #       - name: And no existing variable was overriden
  #         run: | 
  #           # load assertion function
  #           source ./test/shell/assertvariable.sh
    
  #           # perform assertions
  #           assertDefinedAndEqualTo "version_build_tag" "RC"

  #       ## FEATURE : Importing with overrides 

  #       - name: When we require all vars from a set of files with override
  #         uses: zlatko-ms/varfiletoenv@9-add-support-for-filter-on-variables
  #         with:
  #           override: true
  #           paths: |
  #             ./test/fixtures/integ/yaml/product1.yaml
  #             ./test/fixtures/integ/yaml/product2.yaml

  #       - name: Then the already exiting variables will be updated
  #         run: | 
  #           # load assertion function
  #           source ./test/shell/assertvariable.sh

  #           # perform assertions
  #           assertDefinedAndEqualTo "version_product_major" "2"
  #           assertDefinedAndEqualTo "version_product_minor" "1"

  #       - name: And non exiting variables will be injected
  #         run: | 
  #           # load assertion function
  #           source ./test/shell/assertvariable.sh

  #           # perform assertions
  #           assertDefinedAndEqualTo "version_product_label" "fresh"

  #       ## FEATURE : Only valid files are processed

  #       - name: When we require to inject variables from a file set that contains invalid files
  #         uses: zlatko-ms/varfiletoenv@9-add-support-for-filter-on-variables
  #         with:
  #           paths: |
  #             ./test/fixtures/integ/yaml/org.yaml
  #             ./test/fixtures/integ/yaml/missing1.yaml
  #             ./test/fixtures/integ/yaml/missing2.yaml
  
  #       - name: Then the operation will not fail and only variables from valid files will be processed
  #         run: | 
  #           # load assertion function
  #           source ./test/shell/assertvariable.sh
  
  #           # perform assertions
  #           assertDefinedAndEqualTo "version_product_lead" "someone" 
  
  # it-action-mixed:
  #   needs: build-python
  #   env:
  #     version_build_tag: "RC"
  #     version_product_major: 1
  #     version_product_minor: 0

  #   name: Integration Tests - Mixed Formats
  #   runs-on: ubuntu-latest
  #   steps:
  #       - name: Checkout sources for fixtures
  #         uses: actions/checkout@v3

  #       ## FEATURE : Importing without overrides 

  #       - name: When we require all vars from a set of files without override 
  #         uses: zlatko-ms/varfiletoenv@9-add-support-for-filter-on-variables
  #         with:
  #           paths: |
  #             ./test/fixtures/integ/json/build1.json
  #             ./test/fixtures/integ/yaml/build2.yaml

  #       - name: Then all the vars from the fileset are injected
  #         run: | 
  #           # load assertion function
  #           source ./test/shell/assertvariable.sh

  #           # perform assertions
  #           assertDefinedAndEqualTo "version_build_major" "1"
  #           assertDefinedAndEqualTo "version_build_minor" "2"
  #           assertDefinedAndEqualTo "version_build_patch" "42"

  #       - name: And no existing variable was overriden
  #         run: | 
  #           # load assertion function
  #           source ./test/shell/assertvariable.sh
    
  #           # perform assertions
  #           assertDefinedAndEqualTo "version_build_tag" "RC"

  #       ## FEATURE : Importing with overrides 

  #       - name: When we require all vars from a set of files with override
  #         uses: zlatko-ms/varfiletoenv@9-add-support-for-filter-on-variables
  #         with:
  #           override: true
  #           paths: |
  #             ./test/fixtures/integ/yaml/product1.yaml
  #             ./test/fixtures/integ/plain/product2.properties

  #       - name: Then the already exiting variables will be updated
  #         run: | 
  #           # load assertion function
  #           source ./test/shell/assertvariable.sh

  #           # perform assertions
  #           assertDefinedAndEqualTo "version_product_major" "2"
  #           assertDefinedAndEqualTo "version_product_minor" "1"

  #       - name: And non exiting variables will be injected
  #         run: | 
  #           # load assertion function
  #           source ./test/shell/assertvariable.sh

  #           # perform assertions
  #           assertDefinedAndEqualTo "version_product_label" "fresh"

  #       ## FEATURE : Only valid files are processed

  #       - name: When we require to inject variables from a file set that contains invalid files
  #         uses: zlatko-ms/varfiletoenv@9-add-support-for-filter-on-variables
  #         with:
  #           paths: |
  #             ./test/fixtures/integ/yaml/org.yaml
  #             ./test/fixtures/integ/plain/missing1.properties
  #             ./test/fixtures/integ/json/missing2.json
  
  #       - name: Then the operation will not fail and only variables from valid files will be processed
  #         run: | 
  #           # load assertion function
  #           source ./test/shell/assertvariable.sh
  
  #           # perform assertions
  #           assertDefinedAndEqualTo "version_product_lead" "someone" 